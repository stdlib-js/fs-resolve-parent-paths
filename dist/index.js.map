{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/main.js", "../lib/sync.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar contains = require( '@stdlib/array-base-assert-contains' ).factory;\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar isMode = contains( [ 'first', 'some', 'all', 'each' ] );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @param {string} [options.mode] - operation mode\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz',\n*     'mode': 'some'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a valid mode. Option: `%s`.', 'mode', opts.mode ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isStringArray = require( '@stdlib/assert-is-string-array' ).primitives;\nvar isArrayLikeObject = require( '@stdlib/assert-is-array-like-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar cwd = require( '@stdlib/process-cwd' );\nvar exists = require( '@stdlib/fs-exists' );\nvar nulls = require( '@stdlib/array-base-nulls' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar MODES = {\n\t'first': first,\n\t'some': some,\n\t'all': all,\n\t'each': each\n};\n\n\n// FUNCTIONS //\n\n/**\n* Asynchronously resolves the first path match from a set of paths by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @param {Callback} done - callback to invoke after resolving paths\n* @returns {void}\n*/\nfunction first( paths, dir, done ) {\n\tvar child;\n\tvar spath;\n\tvar idx;\n\tvar out;\n\n\tout = [];\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tspath = resolve( dir, paths[ 0 ] );\n\n\tidx = 1; // index of next path\n\texists( spath, onExists );\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line node/handle-callback-err\n\t\tif ( bool ) {\n\t\t\tout.push( spath );\n\t\t\treturn done( null, out );\n\t\t}\n\t\t// If we have traversed all paths at the current directory level, resolve parent directory...\n\t\tif ( idx === paths.length ) {\n\t\t\t// Resolve a parent directory:\n\t\t\tchild = dir;\n\t\t\tdir = resolve( dir, '..' );\n\n\t\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\t\tif ( child === dir ) {\n\t\t\t\treturn done( null, out );\n\t\t\t}\n\t\t\tidx = 0;\n\t\t}\n\t\tspath = resolve( dir, paths[ idx ] );\n\t\tidx += 1;\n\t\texists( spath, onExists );\n\t}\n}\n\n/**\n* Asynchronously resolves one or more paths from a set of paths at a directory level by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @param {Callback} done - callback to invoke after resolving paths\n* @returns {void}\n*/\nfunction some( paths, dir, done ) {\n\tvar child;\n\tvar spath;\n\tvar FLG;\n\tvar out;\n\n\tFLG = 0; // initialize flag to track if we are done traversing a directory level\n\tout = [];\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\treturn next( dir );\n\n\t/**\n\t* Resolves paths within a directory.\n\t*\n\t* @private\n\t* @param {string} dir - directory to search\n\t*/\n\tfunction next( dir ) {\n\t\tvar i;\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\texists( spath, getCallback( spath ) );\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon checking for path existence.\n\t*\n\t* @private\n\t* @param {string} spath - resolved path\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( spath ) {\n\t\treturn onExists;\n\n\t\t/**\n\t\t* Callback invoked after checking for path existence.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {boolean} bool - boolean indicating if a path exists\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onExists( error, bool ) { // eslint-disable-line node/handle-callback-err\n\t\t\tif ( bool ) {\n\t\t\t\tout.push( spath );\n\t\t\t}\n\t\t\tFLG += 1;\n\t\t\tif ( FLG === paths.length ) {\n\t\t\t\t// Check if we have resolved any paths...\n\t\t\t\tif ( out.length > 0 ) {\n\t\t\t\t\treturn done( null, out );\n\t\t\t\t}\n\t\t\t\t// Resolve a parent directory:\n\t\t\t\tchild = dir;\n\t\t\t\tdir = resolve( dir, '..' );\n\n\t\t\t\t// Reset flag:\n\t\t\t\tFLG = 0;\n\n\t\t\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\t\t\tif ( child === dir ) {\n\t\t\t\t\treturn done( null, out );\n\t\t\t\t}\n\t\t\t\t// Resolve paths at next directory level:\n\t\t\t\treturn next( dir );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n* Asynchronously resolves all paths from a set of paths at a directory level by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @param {Callback} done - callback to invoke after resolving paths\n* @returns {void}\n*/\nfunction all( paths, dir, done ) {\n\tvar count;\n\tvar child;\n\tvar spath;\n\tvar FLG;\n\tvar out;\n\n\tcount = 0; // initialize counter to track if we are done resolving all paths\n\tFLG = 0; // initialize flag to track if we are done traversing a directory level\n\tout = nulls( paths.length );\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\treturn next( dir );\n\n\t/**\n\t* Resolves paths within a directory.\n\t*\n\t* @private\n\t* @param {string} dir - directory to search\n\t*/\n\tfunction next( dir ) {\n\t\tvar i;\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\texists( spath, getCallback( i, spath ) );\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon checking for path existence.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @param {string} spath - resolved path\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx, spath ) {\n\t\treturn onExists;\n\n\t\t/**\n\t\t* Callback invoked after checking for path existence.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {boolean} bool - boolean indicating if a path exists\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onExists( error, bool ) { // eslint-disable-line node/handle-callback-err\n\t\t\tif ( bool ) {\n\t\t\t\tout[ idx ] = spath;\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t\tFLG += 1;\n\t\t\tif ( FLG === paths.length ) {\n\t\t\t\t// Check if we have resolved any path...\n\t\t\t\tif ( count === paths.length ) {\n\t\t\t\t\treturn done( null, out );\n\t\t\t\t}\n\t\t\t\t// Resolve a parent directory:\n\t\t\t\tchild = dir;\n\t\t\t\tdir = resolve( dir, '..' );\n\n\t\t\t\t// Reset flag and buffers:\n\t\t\t\tFLG = 0;\n\t\t\t\tout = [];\n\t\t\t\tcount = 0;\n\n\t\t\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\t\t\tif ( child === dir ) {\n\t\t\t\t\treturn done( null, out );\n\t\t\t\t}\n\t\t\t\t// Resolve paths at next directory level:\n\t\t\t\treturn next( dir );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n* Asynchronously resolves each path from a set of paths by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @param {Callback} done - callback to invoke after resolving paths\n* @returns {void}\n*/\nfunction each( paths, dir, done ) {\n\tvar count;\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\tcount = 0; // initialize counter to track if we are done resolving all paths\n\tout = nulls( paths.length );\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tfor ( i = 0; i < paths.length; i++ ) {\n\t\tspath = resolve( dir, paths[ i ] );\n\t\texists( spath, getCallback( i, spath, dir ) );\n\t}\n\n\t/**\n\t* Determines whether all paths have been resolved.\n\t*\n\t* @private\n\t* @returns {void}\n\t*/\n\tfunction next() {\n\t\tcount += 1;\n\t\tif ( count === paths.length ) {\n\t\t\treturn done( null, out );\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon checking for path existence.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @param {string} spath - resolved path\n\t* @param {string} dir - base directory\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx, spath, dir ) {\n\t\treturn onExists;\n\n\t\t/**\n\t\t* Callback invoked after checking for path existence.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {boolean} bool - boolean indicating if a path exists\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onExists( error, bool ) { // eslint-disable-line node/handle-callback-err\n\t\t\tif ( bool ) {\n\t\t\t\tout[ idx ] = spath;\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\t// Resolve a parent directory:\n\t\t\tchild = dir;\n\t\t\tdir = resolve( dir, '..' );\n\n\t\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\t\tif ( child === dir ) {\n\t\t\t\tout[ idx ] = null;\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\t// Resolve path at next directory level:\n\t\t\tspath = resolve( dir, paths[ idx ] );\n\t\t\texists( spath, getCallback( idx, spath, dir ) );\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves paths from a set of paths by walking parent directories.\n*\n* @param {Array<string>} paths - paths to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {string} [options.mode] - mode of operation\n* @param {Callback} clbk - callback to invoke after resolving paths\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {void}\n*\n* @example\n* resolveParentPaths( [ 'package.json', 'package-lock.json' ], onPaths );\n*\n* function onPaths( error, paths ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( paths );\n* }\n*/\nfunction resolveParentPaths( paths, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tvar mode;\n\tvar dir;\n\tvar fcn;\n\tvar err;\n\n\tif ( !isStringArray( paths ) ) {\n\t\tif ( isArrayLikeObject( paths ) && paths.length === 0 ) {\n\t\t\treturn [];\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', paths ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\tdone = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tdone = options;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tmode = opts.mode || 'all';\n\n\tfcn = MODES[ mode ];\n\tfcn( paths, dir, done );\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPaths;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isStringArray = require( '@stdlib/assert-is-string-array' ).primitives;\nvar isArrayLikeObject = require( '@stdlib/assert-is-array-like-object' );\nvar cwd = require( '@stdlib/process-cwd' );\nvar exists = require( '@stdlib/fs-exists' ).sync;\nvar nulls = require( '@stdlib/array-base-nulls' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar MODES = {\n\t'first': first,\n\t'some': some,\n\t'all': all,\n\t'each': each\n};\n\n\n// FUNCTIONS //\n\n/**\n* Synchronously resolves the first path match from a set of paths by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @returns {Array<string>} resolved paths\n*/\nfunction first( paths, dir ) {\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tout = [];\n\twhile ( child !== dir ) {\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\tif ( exists( spath ) ) {\n\t\t\t\tout.push( spath );\n\t\t\t\treturn out;\n\t\t\t}\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn out;\n}\n\n/**\n* Synchronously resolves one or more paths from a set of paths at a directory level by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @returns {Array<string>} resolved paths\n*/\nfunction some( paths, dir ) {\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tout = [];\n\twhile ( child !== dir ) {\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\tif ( exists( spath ) ) {\n\t\t\t\tout.push( spath );\n\t\t\t}\n\t\t}\n\t\tif ( out.length > 0 ) {\n\t\t\treturn out;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn out;\n}\n\n/**\n* Synchronously resolves all paths from a set of paths at a directory level by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @returns {Array<string>} resolved paths\n*/\nfunction all( paths, dir ) {\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tout = [];\n\twhile ( child !== dir ) {\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\tif ( exists( spath ) ) {\n\t\t\t\tout.push( spath );\n\t\t\t}\n\t\t}\n\t\tif ( out.length === paths.length ) {\n\t\t\treturn out;\n\t\t}\n\t\tout = [];\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn out;\n}\n\n/**\n* Synchronously resolves each path from a set of paths by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @returns {Array<string|null>} resolved paths\n*/\nfunction each( paths, dir ) {\n\tvar count;\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\tcount = 0;\n\tout = nulls( paths.length );\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\twhile ( child !== dir ) {\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tif ( out[ i ] !== null ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\tif ( exists( spath ) ) {\n\t\t\t\tout[ i ] = spath;\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\tif ( count === paths.length ) {\n\t\t\tbreak;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Synchronously resolves paths from a set of paths by walking parent directories.\n*\n* @param {Array<string>} paths - paths to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {string} [options.mode='all'] - mode of operation\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Array<string|null>} resolved paths\n*\n* @example\n* var paths = resolveParentPaths( [ 'package.json', 'package-lock.json' ] );\n*/\nfunction resolveParentPaths( paths, options ) {\n\tvar opts;\n\tvar mode;\n\tvar dir;\n\tvar fcn;\n\tvar err;\n\n\tif ( !isStringArray( paths ) ) {\n\t\tif ( isArrayLikeObject( paths ) && paths.length === 0 ) {\n\t\t\treturn [];\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', paths ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tmode = opts.mode || 'all';\n\n\tfcn = MODES[ mode ];\n\treturn fcn( paths, dir );\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPaths;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve paths from a set of paths by walking parent directories.\n*\n* @module @stdlib/fs-resolve-parent-paths\n*\n* @example\n* var resolveParentPaths = require( '@stdlib/fs-resolve-parent-paths' );\n*\n* resolveParentPaths( [ 'package.json', 'package-lock.json' ], onPaths );\n*\n* function onPaths( error, paths ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( paths );\n* }\n*\n* @example\n* var resolveParentPaths = require( '@stdlib/fs-resolve-parent-paths' );\n*\n* var paths = resolveParentPaths.sync( [ 'package.json', 'package-lock.json' ] );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"sync\": \"main.sync\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,gCAAiC,EACrDC,EAAa,QAAS,iCAAkC,EACxDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAW,QAAS,oCAAqC,EAAE,QAC3DC,EAAS,QAAS,uBAAwB,EAK1CC,EAASF,EAAU,CAAE,QAAS,OAAQ,MAAO,MAAO,CAAE,EA2B1D,SAASG,EAAUC,EAAMC,EAAU,CAClC,OAAMR,EAAUQ,CAAQ,EAGnBP,EAAYO,EAAS,KAAM,IAC/BD,EAAK,IAAMC,EAAQ,IACd,CAACN,EAAUK,EAAK,GAAI,GACjB,IAAI,UAAWH,EAAQ,8DAA+D,MAAOG,EAAK,GAAI,CAAE,EAG5GN,EAAYO,EAAS,MAAO,IAChCD,EAAK,KAAOC,EAAQ,KACf,CAACH,EAAQE,EAAK,IAAK,GAChB,IAAI,UAAWH,EAAQ,kEAAmE,OAAQG,EAAK,IAAK,CAAE,EAGhH,KAdC,IAAI,UAAWH,EAAQ,qEAAsEI,CAAQ,CAAE,CAehH,CAKAT,EAAO,QAAUO,IChFjB,IAAAG,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,MAAO,EAAE,QAC5BC,EAAgB,QAAS,gCAAiC,EAAE,WAC5DC,EAAoB,QAAS,qCAAsC,EACnEC,EAAa,QAAS,4BAA6B,EACnDC,EAAM,QAAS,qBAAsB,EACrCC,EAAS,QAAS,mBAAoB,EACtCC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAS,QAAS,uBAAwB,EAC1CC,EAAW,IAKXC,EAAQ,CACX,MAASC,EACT,KAAQC,EACR,IAAOC,EACP,KAAQC,CACT,EAcA,SAASH,EAAOI,EAAOC,EAAKC,EAAO,CAClC,IAAIC,EACAC,EACAC,EACAC,EAEJA,EAAM,CAAC,EAGPF,EAAQlB,EAASe,EAAKD,EAAO,CAAE,CAAE,EAEjCK,EAAM,EACNd,EAAQa,EAAOG,CAAS,EAUxB,SAASA,EAAUC,EAAOC,EAAO,CAChC,GAAKA,EACJ,OAAAH,EAAI,KAAMF,CAAM,EACTF,EAAM,KAAMI,CAAI,EAGxB,GAAKD,IAAQL,EAAM,OAAS,CAM3B,GAJAG,EAAQF,EACRA,EAAMf,EAASe,EAAK,IAAK,EAGpBE,IAAUF,EACd,OAAOC,EAAM,KAAMI,CAAI,EAExBD,EAAM,CACP,CACAD,EAAQlB,EAASe,EAAKD,EAAOK,CAAI,CAAE,EACnCA,GAAO,EACPd,EAAQa,EAAOG,CAAS,CACzB,CACD,CAWA,SAASV,EAAMG,EAAOC,EAAKC,EAAO,CACjC,IAAIC,EACAC,EACAM,EACAJ,EAEJ,OAAAI,EAAM,EACNJ,EAAM,CAAC,EAGAK,EAAMV,CAAI,EAQjB,SAASU,EAAMV,EAAM,CACpB,IAAIW,EACJ,IAAMA,EAAI,EAAGA,EAAIZ,EAAM,OAAQY,IAC9BR,EAAQlB,EAASe,EAAKD,EAAOY,CAAE,CAAE,EACjCrB,EAAQa,EAAOS,EAAaT,CAAM,CAAE,CAEtC,CASA,SAASS,EAAaT,EAAQ,CAC7B,OAAOG,EAUP,SAASA,EAAUC,EAAOC,EAAO,CAKhC,GAJKA,GACJH,EAAI,KAAMF,CAAM,EAEjBM,GAAO,EACFA,IAAQV,EAAM,OAalB,OAXKM,EAAI,OAAS,IAIlBH,EAAQF,EACRA,EAAMf,EAASe,EAAK,IAAK,EAGzBS,EAAM,EAGDP,IAAUF,GACPC,EAAM,KAAMI,CAAI,EAGjBK,EAAMV,CAAI,CAEnB,CACD,CACD,CAWA,SAASH,EAAKE,EAAOC,EAAKC,EAAO,CAChC,IAAIY,EACAX,EACAC,EACAM,EACAJ,EAEJ,OAAAQ,EAAQ,EACRJ,EAAM,EACNJ,EAAMd,EAAOQ,EAAM,MAAO,EAGnBW,EAAMV,CAAI,EAQjB,SAASU,EAAMV,EAAM,CACpB,IAAIW,EACJ,IAAMA,EAAI,EAAGA,EAAIZ,EAAM,OAAQY,IAC9BR,EAAQlB,EAASe,EAAKD,EAAOY,CAAE,CAAE,EACjCrB,EAAQa,EAAOS,EAAaD,EAAGR,CAAM,CAAE,CAEzC,CAUA,SAASS,EAAaR,EAAKD,EAAQ,CAClC,OAAOG,EAUP,SAASA,EAAUC,EAAOC,EAAO,CAMhC,GALKA,IACJH,EAAKD,CAAI,EAAID,EACbU,GAAS,GAEVJ,GAAO,EACFA,IAAQV,EAAM,OAelB,OAbKc,IAAUd,EAAM,SAIrBG,EAAQF,EACRA,EAAMf,EAASe,EAAK,IAAK,EAGzBS,EAAM,EACNJ,EAAM,CAAC,EACPQ,EAAQ,EAGHX,IAAUF,GACPC,EAAM,KAAMI,CAAI,EAGjBK,EAAMV,CAAI,CAEnB,CACD,CACD,CAWA,SAASF,EAAMC,EAAOC,EAAKC,EAAO,CACjC,IAAIY,EACAX,EACAC,EACAE,EACAM,EAMJ,IAJAE,EAAQ,EACRR,EAAMd,EAAOQ,EAAM,MAAO,EAGpBY,EAAI,EAAGA,EAAIZ,EAAM,OAAQY,IAC9BR,EAAQlB,EAASe,EAAKD,EAAOY,CAAE,CAAE,EACjCrB,EAAQa,EAAOS,EAAaD,EAAGR,EAAOH,CAAI,CAAE,EAS7C,SAASU,GAAO,CAEf,GADAG,GAAS,EACJA,IAAUd,EAAM,OACpB,OAAOE,EAAM,KAAMI,CAAI,CAEzB,CAWA,SAASO,EAAaR,EAAKD,EAAOH,EAAM,CACvC,OAAOM,EAUP,SAASA,EAAUC,EAAOC,EAAO,CAChC,GAAKA,EACJ,OAAAH,EAAKD,CAAI,EAAID,EACNO,EAAK,EAOb,GAJAR,EAAQF,EACRA,EAAMf,EAASe,EAAK,IAAK,EAGpBE,IAAUF,EACd,OAAAK,EAAKD,CAAI,EAAI,KACNM,EAAK,EAGbP,EAAQlB,EAASe,EAAKD,EAAOK,CAAI,CAAE,EACnCd,EAAQa,EAAOS,EAAaR,EAAKD,EAAOH,CAAI,CAAE,CAC/C,CACD,CACD,CA6BA,SAASc,EAAoBf,EAAOgB,EAASC,EAAO,CACnD,IAAIC,EACAhB,EACAiB,EACAlB,EACAmB,EACAC,EAEJ,GAAK,CAAClC,EAAea,CAAM,EAAI,CAC9B,GAAKZ,EAAmBY,CAAM,GAAKA,EAAM,SAAW,EACnD,MAAO,CAAC,EAET,MAAM,IAAI,UAAWP,EAAQ,6EAA8EO,CAAM,CAAE,CACpH,CAEA,GADAkB,EAAO,CAAC,EACH,UAAU,OAAS,GAGvB,GAFAhB,EAAOe,EACPI,EAAM3B,EAAUwB,EAAMF,CAAQ,EACzBK,EACJ,MAAMA,OAGPnB,EAAOc,EAER,GAAK,CAAC3B,EAAYa,CAAK,EACtB,MAAM,IAAI,UAAWT,EAAQ,uEAAwES,CAAK,CAAE,EAExGgB,EAAK,IACTjB,EAAMf,EAASI,EAAI,EAAG4B,EAAK,GAAI,EAE/BjB,EAAMX,EAAI,EAEX6B,EAAOD,EAAK,MAAQ,MAEpBE,EAAMzB,EAAOwB,CAAK,EAClBC,EAAKpB,EAAOC,EAAKC,CAAK,CACvB,CAKAjB,EAAO,QAAU8B,IC9ZjB,IAAAO,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,MAAO,EAAE,QAC5BC,EAAgB,QAAS,gCAAiC,EAAE,WAC5DC,EAAoB,QAAS,qCAAsC,EACnEC,EAAM,QAAS,qBAAsB,EACrCC,EAAS,QAAS,mBAAoB,EAAE,KACxCC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAS,QAAS,uBAAwB,EAC1CC,EAAW,IAKXC,GAAQ,CACX,MAASC,GACT,KAAQC,GACR,IAAOC,GACP,KAAQC,EACT,EAaA,SAASH,GAAOI,EAAOC,EAAM,CAC5B,IAAIC,EACAC,EACAC,EACAC,EAIJ,IADAD,EAAM,CAAC,EACCF,IAAUD,GAAM,CACvB,IAAMI,EAAI,EAAGA,EAAIL,EAAM,OAAQK,IAE9B,GADAF,EAAQhB,EAASc,EAAKD,EAAOK,CAAE,CAAE,EAC5Bd,EAAQY,CAAM,EAClB,OAAAC,EAAI,KAAMD,CAAM,EACTC,EAGTF,EAAQD,EACRA,EAAMd,EAASc,EAAK,IAAK,CAC1B,CACA,OAAOG,CACR,CAUA,SAASP,GAAMG,EAAOC,EAAM,CAC3B,IAAIC,EACAC,EACAC,EACAC,EAIJ,IADAD,EAAM,CAAC,EACCF,IAAUD,GAAM,CACvB,IAAMI,EAAI,EAAGA,EAAIL,EAAM,OAAQK,IAC9BF,EAAQhB,EAASc,EAAKD,EAAOK,CAAE,CAAE,EAC5Bd,EAAQY,CAAM,GAClBC,EAAI,KAAMD,CAAM,EAGlB,GAAKC,EAAI,OAAS,EACjB,OAAOA,EAERF,EAAQD,EACRA,EAAMd,EAASc,EAAK,IAAK,CAC1B,CACA,OAAOG,CACR,CAUA,SAASN,GAAKE,EAAOC,EAAM,CAC1B,IAAIC,EACAC,EACAC,EACAC,EAIJ,IADAD,EAAM,CAAC,EACCF,IAAUD,GAAM,CACvB,IAAMI,EAAI,EAAGA,EAAIL,EAAM,OAAQK,IAC9BF,EAAQhB,EAASc,EAAKD,EAAOK,CAAE,CAAE,EAC5Bd,EAAQY,CAAM,GAClBC,EAAI,KAAMD,CAAM,EAGlB,GAAKC,EAAI,SAAWJ,EAAM,OACzB,OAAOI,EAERA,EAAM,CAAC,EACPF,EAAQD,EACRA,EAAMd,EAASc,EAAK,IAAK,CAC1B,CACA,OAAOG,CACR,CAUA,SAASL,GAAMC,EAAOC,EAAM,CAC3B,IAAIK,EACAJ,EACAC,EACAC,EACAC,EAMJ,IAJAC,EAAQ,EACRF,EAAMZ,EAAOQ,EAAM,MAAO,EAGlBE,IAAUD,GAAM,CACvB,IAAMI,EAAI,EAAGA,EAAIL,EAAM,OAAQK,IACzBD,EAAKC,CAAE,IAAM,OAGlBF,EAAQhB,EAASc,EAAKD,EAAOK,CAAE,CAAE,EAC5Bd,EAAQY,CAAM,IAClBC,EAAKC,CAAE,EAAIF,EACXG,GAAS,IAGX,GAAKA,IAAUN,EAAM,OACpB,MAEDE,EAAQD,EACRA,EAAMd,EAASc,EAAK,IAAK,CAC1B,CACA,OAAOG,CACR,CAoBA,SAASG,GAAoBP,EAAOQ,EAAU,CAC7C,IAAIC,EACAC,EACAT,EACAU,EACAC,EAEJ,GAAK,CAACxB,EAAeY,CAAM,EAAI,CAC9B,GAAKX,EAAmBW,CAAM,GAAKA,EAAM,SAAW,EACnD,MAAO,CAAC,EAET,MAAM,IAAI,UAAWP,EAAQ,6EAA8EO,CAAM,CAAE,CACpH,CAEA,GADAS,EAAO,CAAC,EACH,UAAU,OAAS,IACvBG,EAAMlB,EAAUe,EAAMD,CAAQ,EACzBI,GACJ,MAAMA,EAGR,OAAKH,EAAK,IACTR,EAAMd,EAASG,EAAI,EAAGmB,EAAK,GAAI,EAE/BR,EAAMX,EAAI,EAEXoB,EAAOD,EAAK,MAAQ,MAEpBE,EAAMhB,GAAOe,CAAK,EACXC,EAAKX,EAAOC,CAAI,CACxB,CAKAf,EAAO,QAAUqB,KCzLjB,IAAIM,GAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,GAAO,IAKXF,GAAaC,EAAM,OAAQC,EAAK,EAKhC,OAAO,QAAUD",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isString", "contains", "format", "isMode", "validate", "opts", "options", "require_main", "__commonJSMin", "exports", "module", "resolve", "isStringArray", "isArrayLikeObject", "isFunction", "cwd", "exists", "nulls", "format", "validate", "MODES", "first", "some", "all", "each", "paths", "dir", "done", "child", "spath", "idx", "out", "onExists", "error", "bool", "FLG", "next", "i", "getCallback", "count", "resolveParentPaths", "options", "clbk", "opts", "mode", "fcn", "err", "require_sync", "__commonJSMin", "exports", "module", "resolve", "isStringArray", "isArrayLikeObject", "cwd", "exists", "nulls", "format", "validate", "MODES", "first", "some", "all", "each", "paths", "dir", "child", "spath", "out", "i", "count", "resolveParentPaths", "options", "opts", "mode", "fcn", "err", "setReadOnly", "main", "sync"]
}
