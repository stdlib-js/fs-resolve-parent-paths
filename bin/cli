#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs-read-file' ).sync;
var CLI = require( '@stdlib/cli-ctor' );
var resolveParentPaths = require( '@stdlib/fs-resolve-parent-paths' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	opts = {};
	if ( flags.dir ) {
		opts.dir = flags.dir;
	}
	if ( flags.mode ) {
		opts.mode = flags.mode;
	}
	resolveParentPaths( args, opts, onPaths );

	/**
	* Callback invoked upon resolving a path.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {string} paths - resolved paths
	* @returns {void}
	*/
	function onPaths( error, paths ) {
		var i;
		if ( error ) {
			return cli.error( error );
		}
		for ( i = 0; i < paths.length; i++ ) {
			if ( paths[ i ] ) {
				console.log( paths[ i ] ); // eslint-disable-line no-console
			}
		}
	}
}

main();
